cabal-version:  2.2
name:           ADPfusion
version:        0.6.0.0
author:         Christian Hoener zu Siederdissen, 2011-2021
copyright:      Christian Hoener zu Siederdissen, 2011-2021
homepage:       https://github.com/choener/ADPfusion
bug-reports:    https://github.com/choener/ADPfusion/issues
maintainer:     choener@bioinf.uni-leipzig.de
category:       Algorithms, Data Structures, Bioinformatics, Formal Languages
license:        BSD-3-Clause
license-file:   LICENSE
build-type:     Simple
stability:      experimental
tested-with:    GHC == 8.8.4, GHC == 8.10.4, GHC == 9.0
synopsis:       Efficient, high-level dynamic programming.
description:
                <http://www.bioinf.uni-leipzig.de/Software/gADP/ generalized Algebraic Dynamic Programming>
                .
                ADPfusion combines stream-fusion (using the stream interface provided by the vector
                library) and type-level programming to provide highly efficient dynamic programming
                combinators.
                .
                ADPfusion allows writing dynamic programs for single- and multi-tape problems.
                Inputs can be sequences, or sets. New input types can be defined, without having to
                rewrite this library thanks to the open-world assumption of ADPfusion.
                .
                The library provides the machinery for Outside and Ensemble algorithms as well.
                Ensemble algorithms combine Inside and Outside calculations.
                .
                Starting with version 0.4.1 we support writing multiple context-free grammars
                (interleaved syntactic variables). Such grammars have applications in bioinformatics
                and linguistics.
                .
                The homepage provides a number of tutorial-style examples, with linear and
                context-free grammars over sequence and set inputs.
                .
                The formal background for generalized algebraic dynamic programming and ADPfusion is
                described in a number of papers. These can be found on the gADP homepage and in the
                README.
                .
                Note: The core @ADPfusion@ library only provides machinery for linear language over
                sequences. The add-ons @ADPfusionSubword@, @ADPfusionForest@, and others provide
                specialized machinery for other types of formal languages.



Extra-Source-Files:
  README.md
  changelog.md



flag debugdump
  description:  Enable dumping intermediate / core files
  default:      False
  manual:       True

flag dump-core
  description: Dump HTML for the core generated by GHC during compilation
  default:     False
  manual:      True

flag examples
  description:  build the examples
  default:      False
  manual:       True

flag examplenw
  description:  build the example NeedlemanWunsch
  default:      False
  manual:       True

flag examplesparse
  description:  build the sparse NeedlemanWunsch
  default:      False
  manual:       True

flag spectest
  description:  build the spec-ctor test case
  default:      False
  manual:       True

flag llvm
  description:  use llvm
  default:      False
  manual:       True



common deps
  build-depends: base               >= 4.7    && < 5.0
               , bits               >= 0.4
               , containers
               , deepseq
               , ghc-prim
               , mmorph             >= 1.0
               , mtl                >= 2.0
               , primitive          >= 0.5.4
               , QuickCheck         >= 2.7
               , singletons         >= 2.4    && < 3.0
               , strict             >= 0.3
               , template-haskell   >= 2.0
               , th-orphans         >= 0.12
               , transformers       >= 0.3
               , tuple              >= 0.3
               , vector             >= 0.11
               --
               , DPutils            == 0.1.0.*
               , OrderedBits        == 0.0.2.*
               , PrimitiveArray     == 0.10.1.*
  default-extensions: BangPatterns
                    , ConstraintKinds
                    , CPP
                    , DataKinds
                    , DefaultSignatures
                    , DeriveAnyClass
                    , DeriveDataTypeable
                    , DeriveGeneric
                    , DerivingStrategies
                    , FlexibleContexts
                    , FlexibleInstances
                    , GADTs
                    , GeneralizedNewtypeDeriving
                    , KindSignatures
                    , MagicHash
                    , MultiParamTypeClasses
                    -- PolyKinds is very important to get GHC to pick up all
                    -- the instances correctly.
                    , PolyKinds
                    , RankNTypes
                    , RecordWildCards
                    , ScopedTypeVariables
                    , StandaloneDeriving
                    , TemplateHaskell
                    , TupleSections
                    , TypeApplications
                    , TypeFamilies
                    , TypeOperators
                    , TypeSynonymInstances
                    , UndecidableInstances
                    , UnicodeSyntax
  default-language:
    Haskell2010
  ghc-options:
    -O2 -funbox-strict-fields
  if flag(debugdump)
    ghc-options:
      -ddump-to-file
      -ddump-simpl
      -dsuppress-all
  if flag(dump-core)
    build-depends: dump-core
    ghc-options: -fplugin=DumpCore -fplugin-opt DumpCore:core-html



library
  import:
    deps
  exposed-modules:
    -- core system
    ADPfusion.Core
    ADPfusion.Core.Apply
    ADPfusion.Core.Classes
    ADPfusion.Core.Multi
    ADPfusion.Core.SynVar.Array
    ADPfusion.Core.SynVar.Array.Type
    ADPfusion.Core.SynVar.Axiom
    ADPfusion.Core.SynVar.Backtrack
    ADPfusion.Core.SynVar.Fill
    ADPfusion.Core.SynVar.FillTyLvl
    ADPfusion.Core.SynVar.Indices
    ADPfusion.Core.SynVar.Recursive.Type
    ADPfusion.Core.SynVar.Split.Type
    ADPfusion.Core.SynVar.TableWrap
    ADPfusion.Core.Term.Chr
    ADPfusion.Core.Term.Deletion
    ADPfusion.Core.Term.Edge
    ADPfusion.Core.Term.Epsilon
    ADPfusion.Core.Term.MultiChr
    ADPfusion.Core.Term.PeekIndex
    ADPfusion.Core.Term.Str
    ADPfusion.Core.Term.Switch
    ADPfusion.Core.TH
    ADPfusion.Core.TH.Backtrack
    ADPfusion.Core.TH.Common
    ADPfusion.Core.TyLvlIx
--    -- Point L
    ADPfusion.PointL
    ADPfusion.PointL.Core
    ADPfusion.PointL.SynVar.Indices
--    ADP.Fusion.PointL.SynVar.Recursive
    ADPfusion.PointL.Term.Chr
    ADPfusion.PointL.Term.Deletion
    ADPfusion.PointL.Term.Epsilon
    ADPfusion.PointL.Term.MultiChr
    ADPfusion.PointL.Term.PeekIndex
    ADPfusion.PointL.Term.Str
    ADPfusion.PointL.Term.Switch
--    -- Point R
    ADPfusion.PointR
    ADPfusion.PointR.Core
    ADPfusion.PointR.SynVar.Indices
    ADPfusion.PointR.Term.Chr
    ADPfusion.PointR.Term.Deletion
    ADPfusion.PointR.Term.Epsilon
    ADPfusion.PointR.Term.MultiChr
    -- Unit
    ADPfusion.Unit
    ADPfusion.Unit.Core
    ADPfusion.Unit.SynVar.Indices
    ADPfusion.Unit.Term.Deletion
    ADPfusion.Unit.Term.Epsilon
--    -- tutorials
--    ADP.Fusion.Tutorial.NeedlemanWunsch



test-suite properties
  import:
    deps
  type:
    exitcode-stdio-1.0
  main-is:
    properties.hs
  other-modules:
    QuickCheck.Common
    QuickCheck.Point
  ghc-options:
    -threaded -rtsopts -with-rtsopts=-N
  hs-source-dirs:
    tests
  cpp-options:
    -DADPFUSION_TEST_SUITE_PROPERTIES
  build-depends: ADPfusion
               , tasty                        >= 0.11
               , tasty-quickcheck             >= 0.8
               , tasty-th                     >= 0.1



-- Very simple two-sequence alignment.

executable NeedlemanWunsch

  if flag(examples) || flag(examplenw)
    buildable:
      True
    build-depends:  base
                 ,  ADPfusion
                 ,  primitive
                 ,  PrimitiveArray
                 ,  template-haskell
                 ,  vector
                 ,  DPutils
  else
    buildable:
      False
  hs-source-dirs:
    src
  main-is:
    NeedlemanWunsch.hs
  default-language:
    Haskell2010
  default-extensions: BangPatterns
                    , DataKinds
                    , FlexibleContexts
                    , FlexibleInstances
                    , MultiParamTypeClasses
                    , PartialTypeSignatures
                    , PolyKinds
                    , RecordWildCards
                    , TemplateHaskell
                    , TypeApplications
                    , TypeFamilies
                    , TypeOperators
                    , UnicodeSyntax
  ghc-options:
    -O2
    -funbox-strict-fields
    -flate-dmd-anal
    -fspec-constr-count=20
    -fspec-constr-keen
    -fspec-constr-recursive=20
    -fspec-constr-threshold=20
  if flag(debugdump)
    ghc-options:
      -ddump-to-file
      -ddump-simpl
      -dsuppress-all
  if flag(llvm)
    ghc-options:
      -fllvm
      -optlo-O3
  if flag(dump-core)
    build-depends: dump-core
    ghc-options: -fplugin=DumpCore -fplugin-opt DumpCore:core-html



executable SmithWaterman

  if flag(examples)
    buildable:
      True
    build-depends:  base
                 ,  ADPfusion
                 ,  primitive
                 ,  PrimitiveArray
                 ,  template-haskell
                 ,  vector
                 ,  DPutils
  else
    buildable:
      False
  hs-source-dirs:
    src
  main-is:
    SmithWaterman.hs
  default-language:
    Haskell2010
  default-extensions: BangPatterns
                    , DataKinds
                    , FlexibleContexts
                    , FlexibleInstances
                    , MultiParamTypeClasses
                    , PartialTypeSignatures
                    , PolyKinds
                    , RecordWildCards
                    , TemplateHaskell
                    , TypeApplications
                    , TypeFamilies
                    , TypeOperators
                    , UnicodeSyntax
  ghc-options:
    -O2
    -funbox-strict-fields
    -- these parameters do well enough with GHC 8.2
    -- for larger programs, we may have to increase the number of worker
    -- arguments.
    -flate-dmd-anal
    -fspec-constr-count=20
    -fspec-constr-keen
    -fspec-constr-recursive=20
    -fspec-constr-threshold=20
  if flag(debugdump)
    ghc-options:
      -ddump-to-file
      -ddump-simpl
      -dsuppress-all
  if flag(llvm)
    ghc-options:
      -fllvm
      -optlo-O3
  if flag(dump-core)
    build-depends: dump-core
    ghc-options: -fplugin=DumpCore -fplugin-opt DumpCore:core-html



executable Sparse

  if flag(examples) || flag(examplesparse)
    buildable:
      True
    build-depends:  base
                 ,  ADPfusion
                 ,  primitive
                 ,  PrimitiveArray
                 ,  template-haskell
                 ,  vector
                 ,  DPutils
  else
    buildable:
      False
  hs-source-dirs:
    src
  main-is:
    Sparse.hs
  default-language:
    Haskell2010
  default-extensions: BangPatterns
                    , DataKinds
                    , FlexibleContexts
                    , FlexibleInstances
                    , MultiParamTypeClasses
                    , PartialTypeSignatures
                    , PolyKinds
                    , RecordWildCards
                    , ScopedTypeVariables
                    , TemplateHaskell
                    , TypeApplications
                    , TypeFamilies
                    , TypeOperators
                    , UnicodeSyntax
  ghc-options:
    -O2
    -funbox-strict-fields
    -- these parameters do well enough with GHC 8.2
    -- for larger programs, we may have to increase the number of worker
    -- arguments.
    -flate-dmd-anal
    -fspec-constr-count=20
    -fspec-constr-keen
    -fspec-constr-recursive=20
    -fspec-constr-threshold=20
  if flag(debugdump)
    ghc-options:
      -ddump-to-file
      -ddump-simpl
      -dsuppress-all
  if flag(llvm)
    ghc-options:
      -fllvm
      -optlo-O3
  if flag(dump-core)
    build-depends: dump-core
    ghc-options: -fplugin=DumpCore -fplugin-opt DumpCore:core-html



-- Very simple two-sequence alignment.

executable spectest

  if flag(spectest)
    buildable:
      True
    build-depends:  base
                 ,  ADPfusion
                 ,  PrimitiveArray
                 ,  template-haskell
                 ,  vector
  else
    buildable:
      False
  hs-source-dirs:
    src
  main-is:
    SpecTest.hs
  default-language:
    Haskell2010
  default-extensions: BangPatterns
                    , FlexibleContexts
                    , FlexibleInstances
                    , MultiParamTypeClasses
                    , RecordWildCards
                    , TemplateHaskell
                    , TypeFamilies
                    , TypeOperators
  ghc-options:
    -O2
    -funbox-strict-fields
    -funfolding-use-threshold1000
    -funfolding-keeness-factor1000




source-repository head
  type: git
  location: git://github.com/choener/ADPfusion

